// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backend_eng_playground/pkg/repo/model/model"
)

func newWebTracker(db *gorm.DB, opts ...gen.DOOption) webTracker {
	_webTracker := webTracker{}

	_webTracker.webTrackerDo.UseDB(db, opts...)
	_webTracker.webTrackerDo.UseModel(&model.WebTracker{})

	tableName := _webTracker.webTrackerDo.TableName()
	_webTracker.ALL = field.NewAsterisk(tableName)
	_webTracker.ID = field.NewInt64(tableName, "id")
	_webTracker.Code = field.NewString(tableName, "code")
	_webTracker.Name = field.NewString(tableName, "name")
	_webTracker.Mode = field.NewInt32(tableName, "mode")
	_webTracker.Extra = field.NewString(tableName, "extra")
	_webTracker.Version = field.NewInt32(tableName, "version")
	_webTracker.CreatedAt = field.NewTime(tableName, "created_at")
	_webTracker.UpdatedAt = field.NewTime(tableName, "updated_at")
	_webTracker.DeletedAt = field.NewField(tableName, "deleted_at")

	_webTracker.fillFieldMap()

	return _webTracker
}

// webTracker Web Tracker table
type webTracker struct {
	webTrackerDo

	ALL       field.Asterisk
	ID        field.Int64  // Primary key ID
	Code      field.String // Business code
	Name      field.String // Name
	Mode      field.Int32  // Mode
	Extra     field.String // Extra information
	Version   field.Int32  // Optimistic lock version
	CreatedAt field.Time   // Creation time
	UpdatedAt field.Time   // Update time
	DeletedAt field.Field  // Deletion time

	fieldMap map[string]field.Expr
}

func (w webTracker) Table(newTableName string) *webTracker {
	w.webTrackerDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w webTracker) As(alias string) *webTracker {
	w.webTrackerDo.DO = *(w.webTrackerDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *webTracker) updateTableName(table string) *webTracker {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.Code = field.NewString(table, "code")
	w.Name = field.NewString(table, "name")
	w.Mode = field.NewInt32(table, "mode")
	w.Extra = field.NewString(table, "extra")
	w.Version = field.NewInt32(table, "version")
	w.CreatedAt = field.NewTime(table, "created_at")
	w.UpdatedAt = field.NewTime(table, "updated_at")
	w.DeletedAt = field.NewField(table, "deleted_at")

	w.fillFieldMap()

	return w
}

func (w *webTracker) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *webTracker) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 9)
	w.fieldMap["id"] = w.ID
	w.fieldMap["code"] = w.Code
	w.fieldMap["name"] = w.Name
	w.fieldMap["mode"] = w.Mode
	w.fieldMap["extra"] = w.Extra
	w.fieldMap["version"] = w.Version
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["deleted_at"] = w.DeletedAt
}

func (w webTracker) clone(db *gorm.DB) webTracker {
	w.webTrackerDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w webTracker) replaceDB(db *gorm.DB) webTracker {
	w.webTrackerDo.ReplaceDB(db)
	return w
}

type webTrackerDo struct{ gen.DO }

type IWebTrackerDo interface {
	gen.SubQuery
	Debug() IWebTrackerDo
	WithContext(ctx context.Context) IWebTrackerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWebTrackerDo
	WriteDB() IWebTrackerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWebTrackerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWebTrackerDo
	Not(conds ...gen.Condition) IWebTrackerDo
	Or(conds ...gen.Condition) IWebTrackerDo
	Select(conds ...field.Expr) IWebTrackerDo
	Where(conds ...gen.Condition) IWebTrackerDo
	Order(conds ...field.Expr) IWebTrackerDo
	Distinct(cols ...field.Expr) IWebTrackerDo
	Omit(cols ...field.Expr) IWebTrackerDo
	Join(table schema.Tabler, on ...field.Expr) IWebTrackerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWebTrackerDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWebTrackerDo
	Group(cols ...field.Expr) IWebTrackerDo
	Having(conds ...gen.Condition) IWebTrackerDo
	Limit(limit int) IWebTrackerDo
	Offset(offset int) IWebTrackerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWebTrackerDo
	Unscoped() IWebTrackerDo
	Create(values ...*model.WebTracker) error
	CreateInBatches(values []*model.WebTracker, batchSize int) error
	Save(values ...*model.WebTracker) error
	First() (*model.WebTracker, error)
	Take() (*model.WebTracker, error)
	Last() (*model.WebTracker, error)
	Find() ([]*model.WebTracker, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebTracker, err error)
	FindInBatches(result *[]*model.WebTracker, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WebTracker) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWebTrackerDo
	Assign(attrs ...field.AssignExpr) IWebTrackerDo
	Joins(fields ...field.RelationField) IWebTrackerDo
	Preload(fields ...field.RelationField) IWebTrackerDo
	FirstOrInit() (*model.WebTracker, error)
	FirstOrCreate() (*model.WebTracker, error)
	FindByPage(offset int, limit int) (result []*model.WebTracker, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWebTrackerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w webTrackerDo) Debug() IWebTrackerDo {
	return w.withDO(w.DO.Debug())
}

func (w webTrackerDo) WithContext(ctx context.Context) IWebTrackerDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w webTrackerDo) ReadDB() IWebTrackerDo {
	return w.Clauses(dbresolver.Read)
}

func (w webTrackerDo) WriteDB() IWebTrackerDo {
	return w.Clauses(dbresolver.Write)
}

func (w webTrackerDo) Session(config *gorm.Session) IWebTrackerDo {
	return w.withDO(w.DO.Session(config))
}

func (w webTrackerDo) Clauses(conds ...clause.Expression) IWebTrackerDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w webTrackerDo) Returning(value interface{}, columns ...string) IWebTrackerDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w webTrackerDo) Not(conds ...gen.Condition) IWebTrackerDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w webTrackerDo) Or(conds ...gen.Condition) IWebTrackerDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w webTrackerDo) Select(conds ...field.Expr) IWebTrackerDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w webTrackerDo) Where(conds ...gen.Condition) IWebTrackerDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w webTrackerDo) Order(conds ...field.Expr) IWebTrackerDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w webTrackerDo) Distinct(cols ...field.Expr) IWebTrackerDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w webTrackerDo) Omit(cols ...field.Expr) IWebTrackerDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w webTrackerDo) Join(table schema.Tabler, on ...field.Expr) IWebTrackerDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w webTrackerDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWebTrackerDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w webTrackerDo) RightJoin(table schema.Tabler, on ...field.Expr) IWebTrackerDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w webTrackerDo) Group(cols ...field.Expr) IWebTrackerDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w webTrackerDo) Having(conds ...gen.Condition) IWebTrackerDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w webTrackerDo) Limit(limit int) IWebTrackerDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w webTrackerDo) Offset(offset int) IWebTrackerDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w webTrackerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWebTrackerDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w webTrackerDo) Unscoped() IWebTrackerDo {
	return w.withDO(w.DO.Unscoped())
}

func (w webTrackerDo) Create(values ...*model.WebTracker) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w webTrackerDo) CreateInBatches(values []*model.WebTracker, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w webTrackerDo) Save(values ...*model.WebTracker) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w webTrackerDo) First() (*model.WebTracker, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebTracker), nil
	}
}

func (w webTrackerDo) Take() (*model.WebTracker, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebTracker), nil
	}
}

func (w webTrackerDo) Last() (*model.WebTracker, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebTracker), nil
	}
}

func (w webTrackerDo) Find() ([]*model.WebTracker, error) {
	result, err := w.DO.Find()
	return result.([]*model.WebTracker), err
}

func (w webTrackerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebTracker, err error) {
	buf := make([]*model.WebTracker, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w webTrackerDo) FindInBatches(result *[]*model.WebTracker, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w webTrackerDo) Attrs(attrs ...field.AssignExpr) IWebTrackerDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w webTrackerDo) Assign(attrs ...field.AssignExpr) IWebTrackerDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w webTrackerDo) Joins(fields ...field.RelationField) IWebTrackerDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w webTrackerDo) Preload(fields ...field.RelationField) IWebTrackerDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w webTrackerDo) FirstOrInit() (*model.WebTracker, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebTracker), nil
	}
}

func (w webTrackerDo) FirstOrCreate() (*model.WebTracker, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebTracker), nil
	}
}

func (w webTrackerDo) FindByPage(offset int, limit int) (result []*model.WebTracker, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w webTrackerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w webTrackerDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w webTrackerDo) Delete(models ...*model.WebTracker) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *webTrackerDo) withDO(do gen.Dao) *webTrackerDo {
	w.DO = *do.(*gen.DO)
	return w
}
