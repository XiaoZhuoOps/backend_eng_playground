// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backend_eng_playground/pkg/repo/model/model"
)

func newTrackerCost(db *gorm.DB, opts ...gen.DOOption) trackerCost {
	_trackerCost := trackerCost{}

	_trackerCost.trackerCostDo.UseDB(db, opts...)
	_trackerCost.trackerCostDo.UseModel(&model.TrackerCost{})

	tableName := _trackerCost.trackerCostDo.TableName()
	_trackerCost.ALL = field.NewAsterisk(tableName)
	_trackerCost.ID = field.NewInt64(tableName, "id")
	_trackerCost.UserID = field.NewInt64(tableName, "user_id")
	_trackerCost.TrackerType = field.NewString(tableName, "tracker_type")
	_trackerCost.TrackerID = field.NewInt64(tableName, "tracker_id")
	_trackerCost.PDate = field.NewString(tableName, "p_date")
	_trackerCost.TotalCost7Day = field.NewInt64(tableName, "total_cost_7day")
	_trackerCost.CreatedAt = field.NewTime(tableName, "created_at")
	_trackerCost.UpdatedAt = field.NewTime(tableName, "updated_at")

	_trackerCost.fillFieldMap()

	return _trackerCost
}

type trackerCost struct {
	trackerCostDo

	ALL           field.Asterisk
	ID            field.Int64
	UserID        field.Int64
	TrackerType   field.String
	TrackerID     field.Int64
	PDate         field.String
	TotalCost7Day field.Int64
	CreatedAt     field.Time
	UpdatedAt     field.Time

	fieldMap map[string]field.Expr
}

func (t trackerCost) Table(newTableName string) *trackerCost {
	t.trackerCostDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t trackerCost) As(alias string) *trackerCost {
	t.trackerCostDo.DO = *(t.trackerCostDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *trackerCost) updateTableName(table string) *trackerCost {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.UserID = field.NewInt64(table, "user_id")
	t.TrackerType = field.NewString(table, "tracker_type")
	t.TrackerID = field.NewInt64(table, "tracker_id")
	t.PDate = field.NewString(table, "p_date")
	t.TotalCost7Day = field.NewInt64(table, "total_cost_7day")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")

	t.fillFieldMap()

	return t
}

func (t *trackerCost) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *trackerCost) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["id"] = t.ID
	t.fieldMap["user_id"] = t.UserID
	t.fieldMap["tracker_type"] = t.TrackerType
	t.fieldMap["tracker_id"] = t.TrackerID
	t.fieldMap["p_date"] = t.PDate
	t.fieldMap["total_cost_7day"] = t.TotalCost7Day
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
}

func (t trackerCost) clone(db *gorm.DB) trackerCost {
	t.trackerCostDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t trackerCost) replaceDB(db *gorm.DB) trackerCost {
	t.trackerCostDo.ReplaceDB(db)
	return t
}

type trackerCostDo struct{ gen.DO }

type ITrackerCostDo interface {
	gen.SubQuery
	Debug() ITrackerCostDo
	WithContext(ctx context.Context) ITrackerCostDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITrackerCostDo
	WriteDB() ITrackerCostDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITrackerCostDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITrackerCostDo
	Not(conds ...gen.Condition) ITrackerCostDo
	Or(conds ...gen.Condition) ITrackerCostDo
	Select(conds ...field.Expr) ITrackerCostDo
	Where(conds ...gen.Condition) ITrackerCostDo
	Order(conds ...field.Expr) ITrackerCostDo
	Distinct(cols ...field.Expr) ITrackerCostDo
	Omit(cols ...field.Expr) ITrackerCostDo
	Join(table schema.Tabler, on ...field.Expr) ITrackerCostDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITrackerCostDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITrackerCostDo
	Group(cols ...field.Expr) ITrackerCostDo
	Having(conds ...gen.Condition) ITrackerCostDo
	Limit(limit int) ITrackerCostDo
	Offset(offset int) ITrackerCostDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITrackerCostDo
	Unscoped() ITrackerCostDo
	Create(values ...*model.TrackerCost) error
	CreateInBatches(values []*model.TrackerCost, batchSize int) error
	Save(values ...*model.TrackerCost) error
	First() (*model.TrackerCost, error)
	Take() (*model.TrackerCost, error)
	Last() (*model.TrackerCost, error)
	Find() ([]*model.TrackerCost, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TrackerCost, err error)
	FindInBatches(result *[]*model.TrackerCost, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TrackerCost) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITrackerCostDo
	Assign(attrs ...field.AssignExpr) ITrackerCostDo
	Joins(fields ...field.RelationField) ITrackerCostDo
	Preload(fields ...field.RelationField) ITrackerCostDo
	FirstOrInit() (*model.TrackerCost, error)
	FirstOrCreate() (*model.TrackerCost, error)
	FindByPage(offset int, limit int) (result []*model.TrackerCost, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITrackerCostDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t trackerCostDo) Debug() ITrackerCostDo {
	return t.withDO(t.DO.Debug())
}

func (t trackerCostDo) WithContext(ctx context.Context) ITrackerCostDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t trackerCostDo) ReadDB() ITrackerCostDo {
	return t.Clauses(dbresolver.Read)
}

func (t trackerCostDo) WriteDB() ITrackerCostDo {
	return t.Clauses(dbresolver.Write)
}

func (t trackerCostDo) Session(config *gorm.Session) ITrackerCostDo {
	return t.withDO(t.DO.Session(config))
}

func (t trackerCostDo) Clauses(conds ...clause.Expression) ITrackerCostDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t trackerCostDo) Returning(value interface{}, columns ...string) ITrackerCostDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t trackerCostDo) Not(conds ...gen.Condition) ITrackerCostDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t trackerCostDo) Or(conds ...gen.Condition) ITrackerCostDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t trackerCostDo) Select(conds ...field.Expr) ITrackerCostDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t trackerCostDo) Where(conds ...gen.Condition) ITrackerCostDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t trackerCostDo) Order(conds ...field.Expr) ITrackerCostDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t trackerCostDo) Distinct(cols ...field.Expr) ITrackerCostDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t trackerCostDo) Omit(cols ...field.Expr) ITrackerCostDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t trackerCostDo) Join(table schema.Tabler, on ...field.Expr) ITrackerCostDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t trackerCostDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITrackerCostDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t trackerCostDo) RightJoin(table schema.Tabler, on ...field.Expr) ITrackerCostDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t trackerCostDo) Group(cols ...field.Expr) ITrackerCostDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t trackerCostDo) Having(conds ...gen.Condition) ITrackerCostDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t trackerCostDo) Limit(limit int) ITrackerCostDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t trackerCostDo) Offset(offset int) ITrackerCostDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t trackerCostDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITrackerCostDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t trackerCostDo) Unscoped() ITrackerCostDo {
	return t.withDO(t.DO.Unscoped())
}

func (t trackerCostDo) Create(values ...*model.TrackerCost) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t trackerCostDo) CreateInBatches(values []*model.TrackerCost, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t trackerCostDo) Save(values ...*model.TrackerCost) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t trackerCostDo) First() (*model.TrackerCost, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TrackerCost), nil
	}
}

func (t trackerCostDo) Take() (*model.TrackerCost, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TrackerCost), nil
	}
}

func (t trackerCostDo) Last() (*model.TrackerCost, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TrackerCost), nil
	}
}

func (t trackerCostDo) Find() ([]*model.TrackerCost, error) {
	result, err := t.DO.Find()
	return result.([]*model.TrackerCost), err
}

func (t trackerCostDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TrackerCost, err error) {
	buf := make([]*model.TrackerCost, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t trackerCostDo) FindInBatches(result *[]*model.TrackerCost, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t trackerCostDo) Attrs(attrs ...field.AssignExpr) ITrackerCostDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t trackerCostDo) Assign(attrs ...field.AssignExpr) ITrackerCostDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t trackerCostDo) Joins(fields ...field.RelationField) ITrackerCostDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t trackerCostDo) Preload(fields ...field.RelationField) ITrackerCostDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t trackerCostDo) FirstOrInit() (*model.TrackerCost, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TrackerCost), nil
	}
}

func (t trackerCostDo) FirstOrCreate() (*model.TrackerCost, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TrackerCost), nil
	}
}

func (t trackerCostDo) FindByPage(offset int, limit int) (result []*model.TrackerCost, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t trackerCostDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t trackerCostDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t trackerCostDo) Delete(models ...*model.TrackerCost) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *trackerCostDo) withDO(do gen.Dao) *trackerCostDo {
	t.DO = *do.(*gen.DO)
	return t
}
