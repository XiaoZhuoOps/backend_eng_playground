// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backend_eng_playground/pkg/repo/model/model"
)

func newWebTrackerUserRelation(db *gorm.DB, opts ...gen.DOOption) webTrackerUserRelation {
	_webTrackerUserRelation := webTrackerUserRelation{}

	_webTrackerUserRelation.webTrackerUserRelationDo.UseDB(db, opts...)
	_webTrackerUserRelation.webTrackerUserRelationDo.UseModel(&model.WebTrackerUserRelation{})

	tableName := _webTrackerUserRelation.webTrackerUserRelationDo.TableName()
	_webTrackerUserRelation.ALL = field.NewAsterisk(tableName)
	_webTrackerUserRelation.ID = field.NewInt64(tableName, "id")
	_webTrackerUserRelation.TrackerID = field.NewInt64(tableName, "tracker_id")
	_webTrackerUserRelation.UserID = field.NewInt64(tableName, "user_id")
	_webTrackerUserRelation.CreateDate = field.NewTime(tableName, "create_date")

	_webTrackerUserRelation.fillFieldMap()

	return _webTrackerUserRelation
}

// webTrackerUserRelation Tracker and user relation table
type webTrackerUserRelation struct {
	webTrackerUserRelationDo

	ALL        field.Asterisk
	ID         field.Int64 // Auto-increment primary key
	TrackerID  field.Int64 // Tracker ID
	UserID     field.Int64 // User ID
	CreateDate field.Time  // Creation timestamp

	fieldMap map[string]field.Expr
}

func (w webTrackerUserRelation) Table(newTableName string) *webTrackerUserRelation {
	w.webTrackerUserRelationDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w webTrackerUserRelation) As(alias string) *webTrackerUserRelation {
	w.webTrackerUserRelationDo.DO = *(w.webTrackerUserRelationDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *webTrackerUserRelation) updateTableName(table string) *webTrackerUserRelation {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.TrackerID = field.NewInt64(table, "tracker_id")
	w.UserID = field.NewInt64(table, "user_id")
	w.CreateDate = field.NewTime(table, "create_date")

	w.fillFieldMap()

	return w
}

func (w *webTrackerUserRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *webTrackerUserRelation) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 4)
	w.fieldMap["id"] = w.ID
	w.fieldMap["tracker_id"] = w.TrackerID
	w.fieldMap["user_id"] = w.UserID
	w.fieldMap["create_date"] = w.CreateDate
}

func (w webTrackerUserRelation) clone(db *gorm.DB) webTrackerUserRelation {
	w.webTrackerUserRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w webTrackerUserRelation) replaceDB(db *gorm.DB) webTrackerUserRelation {
	w.webTrackerUserRelationDo.ReplaceDB(db)
	return w
}

type webTrackerUserRelationDo struct{ gen.DO }

type IWebTrackerUserRelationDo interface {
	gen.SubQuery
	Debug() IWebTrackerUserRelationDo
	WithContext(ctx context.Context) IWebTrackerUserRelationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWebTrackerUserRelationDo
	WriteDB() IWebTrackerUserRelationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWebTrackerUserRelationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWebTrackerUserRelationDo
	Not(conds ...gen.Condition) IWebTrackerUserRelationDo
	Or(conds ...gen.Condition) IWebTrackerUserRelationDo
	Select(conds ...field.Expr) IWebTrackerUserRelationDo
	Where(conds ...gen.Condition) IWebTrackerUserRelationDo
	Order(conds ...field.Expr) IWebTrackerUserRelationDo
	Distinct(cols ...field.Expr) IWebTrackerUserRelationDo
	Omit(cols ...field.Expr) IWebTrackerUserRelationDo
	Join(table schema.Tabler, on ...field.Expr) IWebTrackerUserRelationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWebTrackerUserRelationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWebTrackerUserRelationDo
	Group(cols ...field.Expr) IWebTrackerUserRelationDo
	Having(conds ...gen.Condition) IWebTrackerUserRelationDo
	Limit(limit int) IWebTrackerUserRelationDo
	Offset(offset int) IWebTrackerUserRelationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWebTrackerUserRelationDo
	Unscoped() IWebTrackerUserRelationDo
	Create(values ...*model.WebTrackerUserRelation) error
	CreateInBatches(values []*model.WebTrackerUserRelation, batchSize int) error
	Save(values ...*model.WebTrackerUserRelation) error
	First() (*model.WebTrackerUserRelation, error)
	Take() (*model.WebTrackerUserRelation, error)
	Last() (*model.WebTrackerUserRelation, error)
	Find() ([]*model.WebTrackerUserRelation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebTrackerUserRelation, err error)
	FindInBatches(result *[]*model.WebTrackerUserRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WebTrackerUserRelation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWebTrackerUserRelationDo
	Assign(attrs ...field.AssignExpr) IWebTrackerUserRelationDo
	Joins(fields ...field.RelationField) IWebTrackerUserRelationDo
	Preload(fields ...field.RelationField) IWebTrackerUserRelationDo
	FirstOrInit() (*model.WebTrackerUserRelation, error)
	FirstOrCreate() (*model.WebTrackerUserRelation, error)
	FindByPage(offset int, limit int) (result []*model.WebTrackerUserRelation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWebTrackerUserRelationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w webTrackerUserRelationDo) Debug() IWebTrackerUserRelationDo {
	return w.withDO(w.DO.Debug())
}

func (w webTrackerUserRelationDo) WithContext(ctx context.Context) IWebTrackerUserRelationDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w webTrackerUserRelationDo) ReadDB() IWebTrackerUserRelationDo {
	return w.Clauses(dbresolver.Read)
}

func (w webTrackerUserRelationDo) WriteDB() IWebTrackerUserRelationDo {
	return w.Clauses(dbresolver.Write)
}

func (w webTrackerUserRelationDo) Session(config *gorm.Session) IWebTrackerUserRelationDo {
	return w.withDO(w.DO.Session(config))
}

func (w webTrackerUserRelationDo) Clauses(conds ...clause.Expression) IWebTrackerUserRelationDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w webTrackerUserRelationDo) Returning(value interface{}, columns ...string) IWebTrackerUserRelationDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w webTrackerUserRelationDo) Not(conds ...gen.Condition) IWebTrackerUserRelationDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w webTrackerUserRelationDo) Or(conds ...gen.Condition) IWebTrackerUserRelationDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w webTrackerUserRelationDo) Select(conds ...field.Expr) IWebTrackerUserRelationDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w webTrackerUserRelationDo) Where(conds ...gen.Condition) IWebTrackerUserRelationDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w webTrackerUserRelationDo) Order(conds ...field.Expr) IWebTrackerUserRelationDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w webTrackerUserRelationDo) Distinct(cols ...field.Expr) IWebTrackerUserRelationDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w webTrackerUserRelationDo) Omit(cols ...field.Expr) IWebTrackerUserRelationDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w webTrackerUserRelationDo) Join(table schema.Tabler, on ...field.Expr) IWebTrackerUserRelationDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w webTrackerUserRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWebTrackerUserRelationDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w webTrackerUserRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) IWebTrackerUserRelationDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w webTrackerUserRelationDo) Group(cols ...field.Expr) IWebTrackerUserRelationDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w webTrackerUserRelationDo) Having(conds ...gen.Condition) IWebTrackerUserRelationDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w webTrackerUserRelationDo) Limit(limit int) IWebTrackerUserRelationDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w webTrackerUserRelationDo) Offset(offset int) IWebTrackerUserRelationDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w webTrackerUserRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWebTrackerUserRelationDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w webTrackerUserRelationDo) Unscoped() IWebTrackerUserRelationDo {
	return w.withDO(w.DO.Unscoped())
}

func (w webTrackerUserRelationDo) Create(values ...*model.WebTrackerUserRelation) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w webTrackerUserRelationDo) CreateInBatches(values []*model.WebTrackerUserRelation, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w webTrackerUserRelationDo) Save(values ...*model.WebTrackerUserRelation) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w webTrackerUserRelationDo) First() (*model.WebTrackerUserRelation, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebTrackerUserRelation), nil
	}
}

func (w webTrackerUserRelationDo) Take() (*model.WebTrackerUserRelation, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebTrackerUserRelation), nil
	}
}

func (w webTrackerUserRelationDo) Last() (*model.WebTrackerUserRelation, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebTrackerUserRelation), nil
	}
}

func (w webTrackerUserRelationDo) Find() ([]*model.WebTrackerUserRelation, error) {
	result, err := w.DO.Find()
	return result.([]*model.WebTrackerUserRelation), err
}

func (w webTrackerUserRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebTrackerUserRelation, err error) {
	buf := make([]*model.WebTrackerUserRelation, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w webTrackerUserRelationDo) FindInBatches(result *[]*model.WebTrackerUserRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w webTrackerUserRelationDo) Attrs(attrs ...field.AssignExpr) IWebTrackerUserRelationDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w webTrackerUserRelationDo) Assign(attrs ...field.AssignExpr) IWebTrackerUserRelationDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w webTrackerUserRelationDo) Joins(fields ...field.RelationField) IWebTrackerUserRelationDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w webTrackerUserRelationDo) Preload(fields ...field.RelationField) IWebTrackerUserRelationDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w webTrackerUserRelationDo) FirstOrInit() (*model.WebTrackerUserRelation, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebTrackerUserRelation), nil
	}
}

func (w webTrackerUserRelationDo) FirstOrCreate() (*model.WebTrackerUserRelation, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebTrackerUserRelation), nil
	}
}

func (w webTrackerUserRelationDo) FindByPage(offset int, limit int) (result []*model.WebTrackerUserRelation, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w webTrackerUserRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w webTrackerUserRelationDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w webTrackerUserRelationDo) Delete(models ...*model.WebTrackerUserRelation) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *webTrackerUserRelationDo) withDO(do gen.Dao) *webTrackerUserRelationDo {
	w.DO = *do.(*gen.DO)
	return w
}
