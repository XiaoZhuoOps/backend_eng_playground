// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"github.com/cloudwego/kitex-examples/bizdemo/kitex_gorm_gen/internal/repository/model/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newAnalyticsMsg(db *gorm.DB, opts ...gen.DOOption) analyticsMsg {
	_analyticsMsg := analyticsMsg{}

	_analyticsMsg.analyticsMsgDo.UseDB(db, opts...)
	_analyticsMsg.analyticsMsgDo.UseModel(&model.AnalyticsMsg{})

	tableName := _analyticsMsg.analyticsMsgDo.TableName()
	_analyticsMsg.ALL = field.NewAsterisk(tableName)
	_analyticsMsg.ID = field.NewInt64(tableName, "id")
	_analyticsMsg.AdvID = field.NewInt64(tableName, "adv_id")
	_analyticsMsg.UserID = field.NewInt64(tableName, "user_id")
	_analyticsMsg.Name = field.NewString(tableName, "name")
	_analyticsMsg.CreatedAt = field.NewTime(tableName, "created_at")
	_analyticsMsg.UpdatedAt = field.NewTime(tableName, "updated_at")
	_analyticsMsg.DeletedAt = field.NewField(tableName, "deleted_at")

	_analyticsMsg.fillFieldMap()

	return _analyticsMsg
}

type analyticsMsg struct {
	analyticsMsgDo

	ALL       field.Asterisk
	ID        field.Int64
	AdvID     field.Int64
	UserID    field.Int64
	Name      field.String
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (a analyticsMsg) Table(newTableName string) *analyticsMsg {
	a.analyticsMsgDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a analyticsMsg) As(alias string) *analyticsMsg {
	a.analyticsMsgDo.DO = *(a.analyticsMsgDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *analyticsMsg) updateTableName(table string) *analyticsMsg {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.AdvID = field.NewInt64(table, "adv_id")
	a.UserID = field.NewInt64(table, "user_id")
	a.Name = field.NewString(table, "name")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.DeletedAt = field.NewField(table, "deleted_at")

	a.fillFieldMap()

	return a
}

func (a *analyticsMsg) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *analyticsMsg) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["id"] = a.ID
	a.fieldMap["adv_id"] = a.AdvID
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["name"] = a.Name
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
}

func (a analyticsMsg) clone(db *gorm.DB) analyticsMsg {
	a.analyticsMsgDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a analyticsMsg) replaceDB(db *gorm.DB) analyticsMsg {
	a.analyticsMsgDo.ReplaceDB(db)
	return a
}

type analyticsMsgDo struct{ gen.DO }

type IAnalyticsMsgDo interface {
	gen.SubQuery
	Debug() IAnalyticsMsgDo
	WithContext(ctx context.Context) IAnalyticsMsgDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAnalyticsMsgDo
	WriteDB() IAnalyticsMsgDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAnalyticsMsgDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAnalyticsMsgDo
	Not(conds ...gen.Condition) IAnalyticsMsgDo
	Or(conds ...gen.Condition) IAnalyticsMsgDo
	Select(conds ...field.Expr) IAnalyticsMsgDo
	Where(conds ...gen.Condition) IAnalyticsMsgDo
	Order(conds ...field.Expr) IAnalyticsMsgDo
	Distinct(cols ...field.Expr) IAnalyticsMsgDo
	Omit(cols ...field.Expr) IAnalyticsMsgDo
	Join(table schema.Tabler, on ...field.Expr) IAnalyticsMsgDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAnalyticsMsgDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAnalyticsMsgDo
	Group(cols ...field.Expr) IAnalyticsMsgDo
	Having(conds ...gen.Condition) IAnalyticsMsgDo
	Limit(limit int) IAnalyticsMsgDo
	Offset(offset int) IAnalyticsMsgDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAnalyticsMsgDo
	Unscoped() IAnalyticsMsgDo
	Create(values ...*model.AnalyticsMsg) error
	CreateInBatches(values []*model.AnalyticsMsg, batchSize int) error
	Save(values ...*model.AnalyticsMsg) error
	First() (*model.AnalyticsMsg, error)
	Take() (*model.AnalyticsMsg, error)
	Last() (*model.AnalyticsMsg, error)
	Find() ([]*model.AnalyticsMsg, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AnalyticsMsg, err error)
	FindInBatches(result *[]*model.AnalyticsMsg, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AnalyticsMsg) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAnalyticsMsgDo
	Assign(attrs ...field.AssignExpr) IAnalyticsMsgDo
	Joins(fields ...field.RelationField) IAnalyticsMsgDo
	Preload(fields ...field.RelationField) IAnalyticsMsgDo
	FirstOrInit() (*model.AnalyticsMsg, error)
	FirstOrCreate() (*model.AnalyticsMsg, error)
	FindByPage(offset int, limit int) (result []*model.AnalyticsMsg, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAnalyticsMsgDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a analyticsMsgDo) Debug() IAnalyticsMsgDo {
	return a.withDO(a.DO.Debug())
}

func (a analyticsMsgDo) WithContext(ctx context.Context) IAnalyticsMsgDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a analyticsMsgDo) ReadDB() IAnalyticsMsgDo {
	return a.Clauses(dbresolver.Read)
}

func (a analyticsMsgDo) WriteDB() IAnalyticsMsgDo {
	return a.Clauses(dbresolver.Write)
}

func (a analyticsMsgDo) Session(config *gorm.Session) IAnalyticsMsgDo {
	return a.withDO(a.DO.Session(config))
}

func (a analyticsMsgDo) Clauses(conds ...clause.Expression) IAnalyticsMsgDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a analyticsMsgDo) Returning(value interface{}, columns ...string) IAnalyticsMsgDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a analyticsMsgDo) Not(conds ...gen.Condition) IAnalyticsMsgDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a analyticsMsgDo) Or(conds ...gen.Condition) IAnalyticsMsgDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a analyticsMsgDo) Select(conds ...field.Expr) IAnalyticsMsgDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a analyticsMsgDo) Where(conds ...gen.Condition) IAnalyticsMsgDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a analyticsMsgDo) Order(conds ...field.Expr) IAnalyticsMsgDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a analyticsMsgDo) Distinct(cols ...field.Expr) IAnalyticsMsgDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a analyticsMsgDo) Omit(cols ...field.Expr) IAnalyticsMsgDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a analyticsMsgDo) Join(table schema.Tabler, on ...field.Expr) IAnalyticsMsgDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a analyticsMsgDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAnalyticsMsgDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a analyticsMsgDo) RightJoin(table schema.Tabler, on ...field.Expr) IAnalyticsMsgDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a analyticsMsgDo) Group(cols ...field.Expr) IAnalyticsMsgDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a analyticsMsgDo) Having(conds ...gen.Condition) IAnalyticsMsgDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a analyticsMsgDo) Limit(limit int) IAnalyticsMsgDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a analyticsMsgDo) Offset(offset int) IAnalyticsMsgDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a analyticsMsgDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAnalyticsMsgDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a analyticsMsgDo) Unscoped() IAnalyticsMsgDo {
	return a.withDO(a.DO.Unscoped())
}

func (a analyticsMsgDo) Create(values ...*model.AnalyticsMsg) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a analyticsMsgDo) CreateInBatches(values []*model.AnalyticsMsg, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a analyticsMsgDo) Save(values ...*model.AnalyticsMsg) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a analyticsMsgDo) First() (*model.AnalyticsMsg, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AnalyticsMsg), nil
	}
}

func (a analyticsMsgDo) Take() (*model.AnalyticsMsg, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AnalyticsMsg), nil
	}
}

func (a analyticsMsgDo) Last() (*model.AnalyticsMsg, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AnalyticsMsg), nil
	}
}

func (a analyticsMsgDo) Find() ([]*model.AnalyticsMsg, error) {
	result, err := a.DO.Find()
	return result.([]*model.AnalyticsMsg), err
}

func (a analyticsMsgDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AnalyticsMsg, err error) {
	buf := make([]*model.AnalyticsMsg, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a analyticsMsgDo) FindInBatches(result *[]*model.AnalyticsMsg, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a analyticsMsgDo) Attrs(attrs ...field.AssignExpr) IAnalyticsMsgDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a analyticsMsgDo) Assign(attrs ...field.AssignExpr) IAnalyticsMsgDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a analyticsMsgDo) Joins(fields ...field.RelationField) IAnalyticsMsgDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a analyticsMsgDo) Preload(fields ...field.RelationField) IAnalyticsMsgDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a analyticsMsgDo) FirstOrInit() (*model.AnalyticsMsg, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AnalyticsMsg), nil
	}
}

func (a analyticsMsgDo) FirstOrCreate() (*model.AnalyticsMsg, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AnalyticsMsg), nil
	}
}

func (a analyticsMsgDo) FindByPage(offset int, limit int) (result []*model.AnalyticsMsg, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a analyticsMsgDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a analyticsMsgDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a analyticsMsgDo) Delete(models ...*model.AnalyticsMsg) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *analyticsMsgDo) withDO(do gen.Dao) *analyticsMsgDo {
	a.DO = *do.(*gen.DO)
	return a
}
