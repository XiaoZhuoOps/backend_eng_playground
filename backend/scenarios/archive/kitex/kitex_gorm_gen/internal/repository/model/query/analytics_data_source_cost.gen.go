// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"github.com/cloudwego/kitex-examples/bizdemo/kitex_gorm_gen/internal/repository/model/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newAnalyticsDataSourceCost(db *gorm.DB, opts ...gen.DOOption) analyticsDataSourceCost {
	_analyticsDataSourceCost := analyticsDataSourceCost{}

	_analyticsDataSourceCost.analyticsDataSourceCostDo.UseDB(db, opts...)
	_analyticsDataSourceCost.analyticsDataSourceCostDo.UseModel(&model.AnalyticsDataSourceCost{})

	tableName := _analyticsDataSourceCost.analyticsDataSourceCostDo.TableName()
	_analyticsDataSourceCost.ALL = field.NewAsterisk(tableName)
	_analyticsDataSourceCost.ID = field.NewInt64(tableName, "id")
	_analyticsDataSourceCost.AdvID = field.NewInt64(tableName, "adv_id")
	_analyticsDataSourceCost.SourceType = field.NewString(tableName, "source_type")
	_analyticsDataSourceCost.SourceID = field.NewInt64(tableName, "source_id")
	_analyticsDataSourceCost.TotalCost7day = field.NewInt64(tableName, "total_cost_7day")
	_analyticsDataSourceCost.PDate = field.NewString(tableName, "p_date")
	_analyticsDataSourceCost.CreatedAt = field.NewTime(tableName, "created_at")
	_analyticsDataSourceCost.UpdatedAt = field.NewTime(tableName, "updated_at")

	_analyticsDataSourceCost.fillFieldMap()

	return _analyticsDataSourceCost
}

type analyticsDataSourceCost struct {
	analyticsDataSourceCostDo

	ALL           field.Asterisk
	ID            field.Int64
	AdvID         field.Int64
	SourceType    field.String
	SourceID      field.Int64
	TotalCost7day field.Int64
	PDate         field.String
	CreatedAt     field.Time
	UpdatedAt     field.Time

	fieldMap map[string]field.Expr
}

func (a analyticsDataSourceCost) Table(newTableName string) *analyticsDataSourceCost {
	a.analyticsDataSourceCostDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a analyticsDataSourceCost) As(alias string) *analyticsDataSourceCost {
	a.analyticsDataSourceCostDo.DO = *(a.analyticsDataSourceCostDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *analyticsDataSourceCost) updateTableName(table string) *analyticsDataSourceCost {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.AdvID = field.NewInt64(table, "adv_id")
	a.SourceType = field.NewString(table, "source_type")
	a.SourceID = field.NewInt64(table, "source_id")
	a.TotalCost7day = field.NewInt64(table, "total_cost_7day")
	a.PDate = field.NewString(table, "p_date")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *analyticsDataSourceCost) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *analyticsDataSourceCost) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 8)
	a.fieldMap["id"] = a.ID
	a.fieldMap["adv_id"] = a.AdvID
	a.fieldMap["source_type"] = a.SourceType
	a.fieldMap["source_id"] = a.SourceID
	a.fieldMap["total_cost_7day"] = a.TotalCost7day
	a.fieldMap["p_date"] = a.PDate
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a analyticsDataSourceCost) clone(db *gorm.DB) analyticsDataSourceCost {
	a.analyticsDataSourceCostDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a analyticsDataSourceCost) replaceDB(db *gorm.DB) analyticsDataSourceCost {
	a.analyticsDataSourceCostDo.ReplaceDB(db)
	return a
}

type analyticsDataSourceCostDo struct{ gen.DO }

type IAnalyticsDataSourceCostDo interface {
	gen.SubQuery
	Debug() IAnalyticsDataSourceCostDo
	WithContext(ctx context.Context) IAnalyticsDataSourceCostDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAnalyticsDataSourceCostDo
	WriteDB() IAnalyticsDataSourceCostDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAnalyticsDataSourceCostDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAnalyticsDataSourceCostDo
	Not(conds ...gen.Condition) IAnalyticsDataSourceCostDo
	Or(conds ...gen.Condition) IAnalyticsDataSourceCostDo
	Select(conds ...field.Expr) IAnalyticsDataSourceCostDo
	Where(conds ...gen.Condition) IAnalyticsDataSourceCostDo
	Order(conds ...field.Expr) IAnalyticsDataSourceCostDo
	Distinct(cols ...field.Expr) IAnalyticsDataSourceCostDo
	Omit(cols ...field.Expr) IAnalyticsDataSourceCostDo
	Join(table schema.Tabler, on ...field.Expr) IAnalyticsDataSourceCostDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAnalyticsDataSourceCostDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAnalyticsDataSourceCostDo
	Group(cols ...field.Expr) IAnalyticsDataSourceCostDo
	Having(conds ...gen.Condition) IAnalyticsDataSourceCostDo
	Limit(limit int) IAnalyticsDataSourceCostDo
	Offset(offset int) IAnalyticsDataSourceCostDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAnalyticsDataSourceCostDo
	Unscoped() IAnalyticsDataSourceCostDo
	Create(values ...*model.AnalyticsDataSourceCost) error
	CreateInBatches(values []*model.AnalyticsDataSourceCost, batchSize int) error
	Save(values ...*model.AnalyticsDataSourceCost) error
	First() (*model.AnalyticsDataSourceCost, error)
	Take() (*model.AnalyticsDataSourceCost, error)
	Last() (*model.AnalyticsDataSourceCost, error)
	Find() ([]*model.AnalyticsDataSourceCost, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AnalyticsDataSourceCost, err error)
	FindInBatches(result *[]*model.AnalyticsDataSourceCost, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AnalyticsDataSourceCost) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAnalyticsDataSourceCostDo
	Assign(attrs ...field.AssignExpr) IAnalyticsDataSourceCostDo
	Joins(fields ...field.RelationField) IAnalyticsDataSourceCostDo
	Preload(fields ...field.RelationField) IAnalyticsDataSourceCostDo
	FirstOrInit() (*model.AnalyticsDataSourceCost, error)
	FirstOrCreate() (*model.AnalyticsDataSourceCost, error)
	FindByPage(offset int, limit int) (result []*model.AnalyticsDataSourceCost, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAnalyticsDataSourceCostDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a analyticsDataSourceCostDo) Debug() IAnalyticsDataSourceCostDo {
	return a.withDO(a.DO.Debug())
}

func (a analyticsDataSourceCostDo) WithContext(ctx context.Context) IAnalyticsDataSourceCostDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a analyticsDataSourceCostDo) ReadDB() IAnalyticsDataSourceCostDo {
	return a.Clauses(dbresolver.Read)
}

func (a analyticsDataSourceCostDo) WriteDB() IAnalyticsDataSourceCostDo {
	return a.Clauses(dbresolver.Write)
}

func (a analyticsDataSourceCostDo) Session(config *gorm.Session) IAnalyticsDataSourceCostDo {
	return a.withDO(a.DO.Session(config))
}

func (a analyticsDataSourceCostDo) Clauses(conds ...clause.Expression) IAnalyticsDataSourceCostDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a analyticsDataSourceCostDo) Returning(value interface{}, columns ...string) IAnalyticsDataSourceCostDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a analyticsDataSourceCostDo) Not(conds ...gen.Condition) IAnalyticsDataSourceCostDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a analyticsDataSourceCostDo) Or(conds ...gen.Condition) IAnalyticsDataSourceCostDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a analyticsDataSourceCostDo) Select(conds ...field.Expr) IAnalyticsDataSourceCostDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a analyticsDataSourceCostDo) Where(conds ...gen.Condition) IAnalyticsDataSourceCostDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a analyticsDataSourceCostDo) Order(conds ...field.Expr) IAnalyticsDataSourceCostDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a analyticsDataSourceCostDo) Distinct(cols ...field.Expr) IAnalyticsDataSourceCostDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a analyticsDataSourceCostDo) Omit(cols ...field.Expr) IAnalyticsDataSourceCostDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a analyticsDataSourceCostDo) Join(table schema.Tabler, on ...field.Expr) IAnalyticsDataSourceCostDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a analyticsDataSourceCostDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAnalyticsDataSourceCostDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a analyticsDataSourceCostDo) RightJoin(table schema.Tabler, on ...field.Expr) IAnalyticsDataSourceCostDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a analyticsDataSourceCostDo) Group(cols ...field.Expr) IAnalyticsDataSourceCostDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a analyticsDataSourceCostDo) Having(conds ...gen.Condition) IAnalyticsDataSourceCostDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a analyticsDataSourceCostDo) Limit(limit int) IAnalyticsDataSourceCostDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a analyticsDataSourceCostDo) Offset(offset int) IAnalyticsDataSourceCostDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a analyticsDataSourceCostDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAnalyticsDataSourceCostDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a analyticsDataSourceCostDo) Unscoped() IAnalyticsDataSourceCostDo {
	return a.withDO(a.DO.Unscoped())
}

func (a analyticsDataSourceCostDo) Create(values ...*model.AnalyticsDataSourceCost) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a analyticsDataSourceCostDo) CreateInBatches(values []*model.AnalyticsDataSourceCost, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a analyticsDataSourceCostDo) Save(values ...*model.AnalyticsDataSourceCost) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a analyticsDataSourceCostDo) First() (*model.AnalyticsDataSourceCost, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AnalyticsDataSourceCost), nil
	}
}

func (a analyticsDataSourceCostDo) Take() (*model.AnalyticsDataSourceCost, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AnalyticsDataSourceCost), nil
	}
}

func (a analyticsDataSourceCostDo) Last() (*model.AnalyticsDataSourceCost, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AnalyticsDataSourceCost), nil
	}
}

func (a analyticsDataSourceCostDo) Find() ([]*model.AnalyticsDataSourceCost, error) {
	result, err := a.DO.Find()
	return result.([]*model.AnalyticsDataSourceCost), err
}

func (a analyticsDataSourceCostDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AnalyticsDataSourceCost, err error) {
	buf := make([]*model.AnalyticsDataSourceCost, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a analyticsDataSourceCostDo) FindInBatches(result *[]*model.AnalyticsDataSourceCost, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a analyticsDataSourceCostDo) Attrs(attrs ...field.AssignExpr) IAnalyticsDataSourceCostDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a analyticsDataSourceCostDo) Assign(attrs ...field.AssignExpr) IAnalyticsDataSourceCostDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a analyticsDataSourceCostDo) Joins(fields ...field.RelationField) IAnalyticsDataSourceCostDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a analyticsDataSourceCostDo) Preload(fields ...field.RelationField) IAnalyticsDataSourceCostDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a analyticsDataSourceCostDo) FirstOrInit() (*model.AnalyticsDataSourceCost, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AnalyticsDataSourceCost), nil
	}
}

func (a analyticsDataSourceCostDo) FirstOrCreate() (*model.AnalyticsDataSourceCost, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AnalyticsDataSourceCost), nil
	}
}

func (a analyticsDataSourceCostDo) FindByPage(offset int, limit int) (result []*model.AnalyticsDataSourceCost, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a analyticsDataSourceCostDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a analyticsDataSourceCostDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a analyticsDataSourceCostDo) Delete(models ...*model.AnalyticsDataSourceCost) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *analyticsDataSourceCostDo) withDO(do gen.Dao) *analyticsDataSourceCostDo {
	a.DO = *do.(*gen.DO)
	return a
}
