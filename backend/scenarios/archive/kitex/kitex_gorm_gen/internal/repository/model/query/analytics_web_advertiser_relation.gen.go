// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"github.com/cloudwego/kitex-examples/bizdemo/kitex_gorm_gen/internal/repository/model/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newAnalyticsWebAdvertiserRelation(db *gorm.DB, opts ...gen.DOOption) analyticsWebAdvertiserRelation {
	_analyticsWebAdvertiserRelation := analyticsWebAdvertiserRelation{}

	_analyticsWebAdvertiserRelation.analyticsWebAdvertiserRelationDo.UseDB(db, opts...)
	_analyticsWebAdvertiserRelation.analyticsWebAdvertiserRelationDo.UseModel(&model.AnalyticsWebAdvertiserRelation{})

	tableName := _analyticsWebAdvertiserRelation.analyticsWebAdvertiserRelationDo.TableName()
	_analyticsWebAdvertiserRelation.ALL = field.NewAsterisk(tableName)
	_analyticsWebAdvertiserRelation.ID = field.NewInt64(tableName, "id")
	_analyticsWebAdvertiserRelation.WebID = field.NewInt64(tableName, "web_id")
	_analyticsWebAdvertiserRelation.AdvID = field.NewInt64(tableName, "adv_id")
	_analyticsWebAdvertiserRelation.CreateDate = field.NewTime(tableName, "create_date")

	_analyticsWebAdvertiserRelation.fillFieldMap()

	return _analyticsWebAdvertiserRelation
}

type analyticsWebAdvertiserRelation struct {
	analyticsWebAdvertiserRelationDo

	ALL        field.Asterisk
	ID         field.Int64
	WebID      field.Int64
	AdvID      field.Int64
	CreateDate field.Time

	fieldMap map[string]field.Expr
}

func (a analyticsWebAdvertiserRelation) Table(newTableName string) *analyticsWebAdvertiserRelation {
	a.analyticsWebAdvertiserRelationDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a analyticsWebAdvertiserRelation) As(alias string) *analyticsWebAdvertiserRelation {
	a.analyticsWebAdvertiserRelationDo.DO = *(a.analyticsWebAdvertiserRelationDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *analyticsWebAdvertiserRelation) updateTableName(table string) *analyticsWebAdvertiserRelation {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.WebID = field.NewInt64(table, "web_id")
	a.AdvID = field.NewInt64(table, "adv_id")
	a.CreateDate = field.NewTime(table, "create_date")

	a.fillFieldMap()

	return a
}

func (a *analyticsWebAdvertiserRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *analyticsWebAdvertiserRelation) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 4)
	a.fieldMap["id"] = a.ID
	a.fieldMap["web_id"] = a.WebID
	a.fieldMap["adv_id"] = a.AdvID
	a.fieldMap["create_date"] = a.CreateDate
}

func (a analyticsWebAdvertiserRelation) clone(db *gorm.DB) analyticsWebAdvertiserRelation {
	a.analyticsWebAdvertiserRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a analyticsWebAdvertiserRelation) replaceDB(db *gorm.DB) analyticsWebAdvertiserRelation {
	a.analyticsWebAdvertiserRelationDo.ReplaceDB(db)
	return a
}

type analyticsWebAdvertiserRelationDo struct{ gen.DO }

type IAnalyticsWebAdvertiserRelationDo interface {
	gen.SubQuery
	Debug() IAnalyticsWebAdvertiserRelationDo
	WithContext(ctx context.Context) IAnalyticsWebAdvertiserRelationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAnalyticsWebAdvertiserRelationDo
	WriteDB() IAnalyticsWebAdvertiserRelationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAnalyticsWebAdvertiserRelationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAnalyticsWebAdvertiserRelationDo
	Not(conds ...gen.Condition) IAnalyticsWebAdvertiserRelationDo
	Or(conds ...gen.Condition) IAnalyticsWebAdvertiserRelationDo
	Select(conds ...field.Expr) IAnalyticsWebAdvertiserRelationDo
	Where(conds ...gen.Condition) IAnalyticsWebAdvertiserRelationDo
	Order(conds ...field.Expr) IAnalyticsWebAdvertiserRelationDo
	Distinct(cols ...field.Expr) IAnalyticsWebAdvertiserRelationDo
	Omit(cols ...field.Expr) IAnalyticsWebAdvertiserRelationDo
	Join(table schema.Tabler, on ...field.Expr) IAnalyticsWebAdvertiserRelationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAnalyticsWebAdvertiserRelationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAnalyticsWebAdvertiserRelationDo
	Group(cols ...field.Expr) IAnalyticsWebAdvertiserRelationDo
	Having(conds ...gen.Condition) IAnalyticsWebAdvertiserRelationDo
	Limit(limit int) IAnalyticsWebAdvertiserRelationDo
	Offset(offset int) IAnalyticsWebAdvertiserRelationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAnalyticsWebAdvertiserRelationDo
	Unscoped() IAnalyticsWebAdvertiserRelationDo
	Create(values ...*model.AnalyticsWebAdvertiserRelation) error
	CreateInBatches(values []*model.AnalyticsWebAdvertiserRelation, batchSize int) error
	Save(values ...*model.AnalyticsWebAdvertiserRelation) error
	First() (*model.AnalyticsWebAdvertiserRelation, error)
	Take() (*model.AnalyticsWebAdvertiserRelation, error)
	Last() (*model.AnalyticsWebAdvertiserRelation, error)
	Find() ([]*model.AnalyticsWebAdvertiserRelation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AnalyticsWebAdvertiserRelation, err error)
	FindInBatches(result *[]*model.AnalyticsWebAdvertiserRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AnalyticsWebAdvertiserRelation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAnalyticsWebAdvertiserRelationDo
	Assign(attrs ...field.AssignExpr) IAnalyticsWebAdvertiserRelationDo
	Joins(fields ...field.RelationField) IAnalyticsWebAdvertiserRelationDo
	Preload(fields ...field.RelationField) IAnalyticsWebAdvertiserRelationDo
	FirstOrInit() (*model.AnalyticsWebAdvertiserRelation, error)
	FirstOrCreate() (*model.AnalyticsWebAdvertiserRelation, error)
	FindByPage(offset int, limit int) (result []*model.AnalyticsWebAdvertiserRelation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAnalyticsWebAdvertiserRelationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a analyticsWebAdvertiserRelationDo) Debug() IAnalyticsWebAdvertiserRelationDo {
	return a.withDO(a.DO.Debug())
}

func (a analyticsWebAdvertiserRelationDo) WithContext(ctx context.Context) IAnalyticsWebAdvertiserRelationDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a analyticsWebAdvertiserRelationDo) ReadDB() IAnalyticsWebAdvertiserRelationDo {
	return a.Clauses(dbresolver.Read)
}

func (a analyticsWebAdvertiserRelationDo) WriteDB() IAnalyticsWebAdvertiserRelationDo {
	return a.Clauses(dbresolver.Write)
}

func (a analyticsWebAdvertiserRelationDo) Session(config *gorm.Session) IAnalyticsWebAdvertiserRelationDo {
	return a.withDO(a.DO.Session(config))
}

func (a analyticsWebAdvertiserRelationDo) Clauses(conds ...clause.Expression) IAnalyticsWebAdvertiserRelationDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a analyticsWebAdvertiserRelationDo) Returning(value interface{}, columns ...string) IAnalyticsWebAdvertiserRelationDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a analyticsWebAdvertiserRelationDo) Not(conds ...gen.Condition) IAnalyticsWebAdvertiserRelationDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a analyticsWebAdvertiserRelationDo) Or(conds ...gen.Condition) IAnalyticsWebAdvertiserRelationDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a analyticsWebAdvertiserRelationDo) Select(conds ...field.Expr) IAnalyticsWebAdvertiserRelationDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a analyticsWebAdvertiserRelationDo) Where(conds ...gen.Condition) IAnalyticsWebAdvertiserRelationDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a analyticsWebAdvertiserRelationDo) Order(conds ...field.Expr) IAnalyticsWebAdvertiserRelationDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a analyticsWebAdvertiserRelationDo) Distinct(cols ...field.Expr) IAnalyticsWebAdvertiserRelationDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a analyticsWebAdvertiserRelationDo) Omit(cols ...field.Expr) IAnalyticsWebAdvertiserRelationDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a analyticsWebAdvertiserRelationDo) Join(table schema.Tabler, on ...field.Expr) IAnalyticsWebAdvertiserRelationDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a analyticsWebAdvertiserRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAnalyticsWebAdvertiserRelationDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a analyticsWebAdvertiserRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) IAnalyticsWebAdvertiserRelationDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a analyticsWebAdvertiserRelationDo) Group(cols ...field.Expr) IAnalyticsWebAdvertiserRelationDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a analyticsWebAdvertiserRelationDo) Having(conds ...gen.Condition) IAnalyticsWebAdvertiserRelationDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a analyticsWebAdvertiserRelationDo) Limit(limit int) IAnalyticsWebAdvertiserRelationDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a analyticsWebAdvertiserRelationDo) Offset(offset int) IAnalyticsWebAdvertiserRelationDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a analyticsWebAdvertiserRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAnalyticsWebAdvertiserRelationDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a analyticsWebAdvertiserRelationDo) Unscoped() IAnalyticsWebAdvertiserRelationDo {
	return a.withDO(a.DO.Unscoped())
}

func (a analyticsWebAdvertiserRelationDo) Create(values ...*model.AnalyticsWebAdvertiserRelation) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a analyticsWebAdvertiserRelationDo) CreateInBatches(values []*model.AnalyticsWebAdvertiserRelation, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a analyticsWebAdvertiserRelationDo) Save(values ...*model.AnalyticsWebAdvertiserRelation) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a analyticsWebAdvertiserRelationDo) First() (*model.AnalyticsWebAdvertiserRelation, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AnalyticsWebAdvertiserRelation), nil
	}
}

func (a analyticsWebAdvertiserRelationDo) Take() (*model.AnalyticsWebAdvertiserRelation, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AnalyticsWebAdvertiserRelation), nil
	}
}

func (a analyticsWebAdvertiserRelationDo) Last() (*model.AnalyticsWebAdvertiserRelation, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AnalyticsWebAdvertiserRelation), nil
	}
}

func (a analyticsWebAdvertiserRelationDo) Find() ([]*model.AnalyticsWebAdvertiserRelation, error) {
	result, err := a.DO.Find()
	return result.([]*model.AnalyticsWebAdvertiserRelation), err
}

func (a analyticsWebAdvertiserRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AnalyticsWebAdvertiserRelation, err error) {
	buf := make([]*model.AnalyticsWebAdvertiserRelation, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a analyticsWebAdvertiserRelationDo) FindInBatches(result *[]*model.AnalyticsWebAdvertiserRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a analyticsWebAdvertiserRelationDo) Attrs(attrs ...field.AssignExpr) IAnalyticsWebAdvertiserRelationDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a analyticsWebAdvertiserRelationDo) Assign(attrs ...field.AssignExpr) IAnalyticsWebAdvertiserRelationDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a analyticsWebAdvertiserRelationDo) Joins(fields ...field.RelationField) IAnalyticsWebAdvertiserRelationDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a analyticsWebAdvertiserRelationDo) Preload(fields ...field.RelationField) IAnalyticsWebAdvertiserRelationDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a analyticsWebAdvertiserRelationDo) FirstOrInit() (*model.AnalyticsWebAdvertiserRelation, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AnalyticsWebAdvertiserRelation), nil
	}
}

func (a analyticsWebAdvertiserRelationDo) FirstOrCreate() (*model.AnalyticsWebAdvertiserRelation, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AnalyticsWebAdvertiserRelation), nil
	}
}

func (a analyticsWebAdvertiserRelationDo) FindByPage(offset int, limit int) (result []*model.AnalyticsWebAdvertiserRelation, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a analyticsWebAdvertiserRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a analyticsWebAdvertiserRelationDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a analyticsWebAdvertiserRelationDo) Delete(models ...*model.AnalyticsWebAdvertiserRelation) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *analyticsWebAdvertiserRelationDo) withDO(do gen.Dao) *analyticsWebAdvertiserRelationDo {
	a.DO = *do.(*gen.DO)
	return a
}
