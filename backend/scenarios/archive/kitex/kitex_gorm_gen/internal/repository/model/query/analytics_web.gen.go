// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"github.com/cloudwego/kitex-examples/bizdemo/kitex_gorm_gen/internal/repository/model/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newAnalyticsWeb(db *gorm.DB, opts ...gen.DOOption) analyticsWeb {
	_analyticsWeb := analyticsWeb{}

	_analyticsWeb.analyticsWebDo.UseDB(db, opts...)
	_analyticsWeb.analyticsWebDo.UseModel(&model.AnalyticsWeb{})

	tableName := _analyticsWeb.analyticsWebDo.TableName()
	_analyticsWeb.ALL = field.NewAsterisk(tableName)
	_analyticsWeb.ID = field.NewInt64(tableName, "id")
	_analyticsWeb.WebCode = field.NewString(tableName, "web_code")
	_analyticsWeb.Name = field.NewString(tableName, "name")
	_analyticsWeb.CreatedAt = field.NewTime(tableName, "created_at")
	_analyticsWeb.UpdatedAt = field.NewTime(tableName, "updated_at")
	_analyticsWeb.DeletedAt = field.NewField(tableName, "deleted_at")
	_analyticsWeb.Version = field.NewInt32(tableName, "version")
	_analyticsWeb.Extra = field.NewString(tableName, "extra")
	_analyticsWeb.EventSetupMode = field.NewInt32(tableName, "event_setup_mode")

	_analyticsWeb.fillFieldMap()

	return _analyticsWeb
}

type analyticsWeb struct {
	analyticsWebDo

	ALL            field.Asterisk
	ID             field.Int64
	WebCode        field.String
	Name           field.String
	CreatedAt      field.Time
	UpdatedAt      field.Time
	DeletedAt      field.Field
	Version        field.Int32
	Extra          field.String
	EventSetupMode field.Int32

	fieldMap map[string]field.Expr
}

func (a analyticsWeb) Table(newTableName string) *analyticsWeb {
	a.analyticsWebDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a analyticsWeb) As(alias string) *analyticsWeb {
	a.analyticsWebDo.DO = *(a.analyticsWebDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *analyticsWeb) updateTableName(table string) *analyticsWeb {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.WebCode = field.NewString(table, "web_code")
	a.Name = field.NewString(table, "name")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.DeletedAt = field.NewField(table, "deleted_at")
	a.Version = field.NewInt32(table, "version")
	a.Extra = field.NewString(table, "extra")
	a.EventSetupMode = field.NewInt32(table, "event_setup_mode")

	a.fillFieldMap()

	return a
}

func (a *analyticsWeb) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *analyticsWeb) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 9)
	a.fieldMap["id"] = a.ID
	a.fieldMap["web_code"] = a.WebCode
	a.fieldMap["name"] = a.Name
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
	a.fieldMap["version"] = a.Version
	a.fieldMap["extra"] = a.Extra
	a.fieldMap["event_setup_mode"] = a.EventSetupMode
}

func (a analyticsWeb) clone(db *gorm.DB) analyticsWeb {
	a.analyticsWebDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a analyticsWeb) replaceDB(db *gorm.DB) analyticsWeb {
	a.analyticsWebDo.ReplaceDB(db)
	return a
}

type analyticsWebDo struct{ gen.DO }

type IAnalyticsWebDo interface {
	gen.SubQuery
	Debug() IAnalyticsWebDo
	WithContext(ctx context.Context) IAnalyticsWebDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAnalyticsWebDo
	WriteDB() IAnalyticsWebDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAnalyticsWebDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAnalyticsWebDo
	Not(conds ...gen.Condition) IAnalyticsWebDo
	Or(conds ...gen.Condition) IAnalyticsWebDo
	Select(conds ...field.Expr) IAnalyticsWebDo
	Where(conds ...gen.Condition) IAnalyticsWebDo
	Order(conds ...field.Expr) IAnalyticsWebDo
	Distinct(cols ...field.Expr) IAnalyticsWebDo
	Omit(cols ...field.Expr) IAnalyticsWebDo
	Join(table schema.Tabler, on ...field.Expr) IAnalyticsWebDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAnalyticsWebDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAnalyticsWebDo
	Group(cols ...field.Expr) IAnalyticsWebDo
	Having(conds ...gen.Condition) IAnalyticsWebDo
	Limit(limit int) IAnalyticsWebDo
	Offset(offset int) IAnalyticsWebDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAnalyticsWebDo
	Unscoped() IAnalyticsWebDo
	Create(values ...*model.AnalyticsWeb) error
	CreateInBatches(values []*model.AnalyticsWeb, batchSize int) error
	Save(values ...*model.AnalyticsWeb) error
	First() (*model.AnalyticsWeb, error)
	Take() (*model.AnalyticsWeb, error)
	Last() (*model.AnalyticsWeb, error)
	Find() ([]*model.AnalyticsWeb, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AnalyticsWeb, err error)
	FindInBatches(result *[]*model.AnalyticsWeb, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AnalyticsWeb) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAnalyticsWebDo
	Assign(attrs ...field.AssignExpr) IAnalyticsWebDo
	Joins(fields ...field.RelationField) IAnalyticsWebDo
	Preload(fields ...field.RelationField) IAnalyticsWebDo
	FirstOrInit() (*model.AnalyticsWeb, error)
	FirstOrCreate() (*model.AnalyticsWeb, error)
	FindByPage(offset int, limit int) (result []*model.AnalyticsWeb, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAnalyticsWebDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a analyticsWebDo) Debug() IAnalyticsWebDo {
	return a.withDO(a.DO.Debug())
}

func (a analyticsWebDo) WithContext(ctx context.Context) IAnalyticsWebDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a analyticsWebDo) ReadDB() IAnalyticsWebDo {
	return a.Clauses(dbresolver.Read)
}

func (a analyticsWebDo) WriteDB() IAnalyticsWebDo {
	return a.Clauses(dbresolver.Write)
}

func (a analyticsWebDo) Session(config *gorm.Session) IAnalyticsWebDo {
	return a.withDO(a.DO.Session(config))
}

func (a analyticsWebDo) Clauses(conds ...clause.Expression) IAnalyticsWebDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a analyticsWebDo) Returning(value interface{}, columns ...string) IAnalyticsWebDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a analyticsWebDo) Not(conds ...gen.Condition) IAnalyticsWebDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a analyticsWebDo) Or(conds ...gen.Condition) IAnalyticsWebDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a analyticsWebDo) Select(conds ...field.Expr) IAnalyticsWebDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a analyticsWebDo) Where(conds ...gen.Condition) IAnalyticsWebDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a analyticsWebDo) Order(conds ...field.Expr) IAnalyticsWebDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a analyticsWebDo) Distinct(cols ...field.Expr) IAnalyticsWebDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a analyticsWebDo) Omit(cols ...field.Expr) IAnalyticsWebDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a analyticsWebDo) Join(table schema.Tabler, on ...field.Expr) IAnalyticsWebDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a analyticsWebDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAnalyticsWebDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a analyticsWebDo) RightJoin(table schema.Tabler, on ...field.Expr) IAnalyticsWebDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a analyticsWebDo) Group(cols ...field.Expr) IAnalyticsWebDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a analyticsWebDo) Having(conds ...gen.Condition) IAnalyticsWebDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a analyticsWebDo) Limit(limit int) IAnalyticsWebDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a analyticsWebDo) Offset(offset int) IAnalyticsWebDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a analyticsWebDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAnalyticsWebDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a analyticsWebDo) Unscoped() IAnalyticsWebDo {
	return a.withDO(a.DO.Unscoped())
}

func (a analyticsWebDo) Create(values ...*model.AnalyticsWeb) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a analyticsWebDo) CreateInBatches(values []*model.AnalyticsWeb, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a analyticsWebDo) Save(values ...*model.AnalyticsWeb) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a analyticsWebDo) First() (*model.AnalyticsWeb, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AnalyticsWeb), nil
	}
}

func (a analyticsWebDo) Take() (*model.AnalyticsWeb, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AnalyticsWeb), nil
	}
}

func (a analyticsWebDo) Last() (*model.AnalyticsWeb, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AnalyticsWeb), nil
	}
}

func (a analyticsWebDo) Find() ([]*model.AnalyticsWeb, error) {
	result, err := a.DO.Find()
	return result.([]*model.AnalyticsWeb), err
}

func (a analyticsWebDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AnalyticsWeb, err error) {
	buf := make([]*model.AnalyticsWeb, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a analyticsWebDo) FindInBatches(result *[]*model.AnalyticsWeb, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a analyticsWebDo) Attrs(attrs ...field.AssignExpr) IAnalyticsWebDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a analyticsWebDo) Assign(attrs ...field.AssignExpr) IAnalyticsWebDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a analyticsWebDo) Joins(fields ...field.RelationField) IAnalyticsWebDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a analyticsWebDo) Preload(fields ...field.RelationField) IAnalyticsWebDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a analyticsWebDo) FirstOrInit() (*model.AnalyticsWeb, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AnalyticsWeb), nil
	}
}

func (a analyticsWebDo) FirstOrCreate() (*model.AnalyticsWeb, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AnalyticsWeb), nil
	}
}

func (a analyticsWebDo) FindByPage(offset int, limit int) (result []*model.AnalyticsWeb, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a analyticsWebDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a analyticsWebDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a analyticsWebDo) Delete(models ...*model.AnalyticsWeb) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *analyticsWebDo) withDO(do gen.Dao) *analyticsWebDo {
	a.DO = *do.(*gen.DO)
	return a
}
